package usecases

import (
	"bytes"
	_ "embed"
	"encoding/base64"
	"fmt"
	"strings"
	"text/template"

	"github.com/mishannn/wb-goods-feed/internal/entities/feed"
	"github.com/mishannn/wb-goods-feed/internal/entities/product"
)

//go:embed pricehistorychart.tmpl
var chartTemplate string

type HistoryChartData struct {
	Days   []string
	Prices []string
}

func generatePriceHistoryChartLink(priceHistory []product.PriceHistoryItem) (string, error) {
	funcs := template.FuncMap{"join": strings.Join}

	tmpl, err := template.New("pricehistorychart").Funcs(funcs).Parse(chartTemplate)
	if err != nil {
		return "", fmt.Errorf("can't parse template: %w", err)
	}

	days := make([]string, 0, len(priceHistory))
	prices := make([]string, 0, len(priceHistory))
	for _, item := range priceHistory {
		days = append(days, item.Date.Format("02.01"))
		prices = append(prices, fmt.Sprintf("%d", item.Price.RUB/100))
	}

	var mermaidCode bytes.Buffer
	err = tmpl.Execute(&mermaidCode, HistoryChartData{
		Days:   days,
		Prices: prices,
	})
	if err != nil {
		return "", fmt.Errorf("can't execute template: %w", err)
	}

	encoded := base64.StdEncoding.EncodeToString(mermaidCode.Bytes())
	return fmt.Sprintf("https://mermaid.ink/img/%s", encoded), nil
}

type PostProduct struct {
	fetcher product.Fetcher
	chooser product.Chooser
	poster  feed.Poster
}

func NewPostProduct(fetcher product.Fetcher, chooser product.Chooser, poster feed.Poster) *PostProduct {
	return &PostProduct{
		fetcher: fetcher,
		chooser: chooser,
		poster:  poster,
	}
}

func (pp *PostProduct) Do() error {
	// –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç

	products, err := pp.fetcher.GetProducts()
	if err != nil {
		return fmt.Errorf("can't get products: %w", err)
	}

	product, err := pp.chooser.ChooseProduct(products)
	if err != nil {
		return fmt.Errorf("can't choose product: %w", err)
	}

	// –ó–∞–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

	var imagesLimit int
	if len(product.Images) >= 5 {
		imagesLimit = 5
	} else {
		imagesLimit = len(product.Images)
	}

	postImages := make([]feed.Image, 0, len(product.Images))
	for _, productImage := range product.Images[0:imagesLimit] {
		postImages = append(postImages, feed.Image(productImage))
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω

	if len(product.PriceHistory) >= 2 {
		chartImageURL, err := generatePriceHistoryChartLink(product.PriceHistory)
		if err != nil {
			return fmt.Errorf("can't generate price history chart: %w", err)
		}
		postImages = append(postImages, feed.Image{
			URL: chartImageURL,
		})
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä

	productPrice := product.PriceHistory[len(product.PriceHistory)-1].Price.RUB

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç

	content := fmt.Sprintf("–¶–µ–Ω–∞ üí≥ %d —Ä—É–±.\n–†–µ–π—Ç–∏–Ω–≥ ‚≠êÔ∏è %.1f –Ω–∞ üí¨ %d –æ—Ç–∑—ã–≤–æ–≤", productPrice/100, product.Rating, product.ReviewCount)

	if len(product.Tags) > 0 {
		tagsRowItems := make([]string, 0, len(product.Tags))
		for _, tag := range product.Tags {
			tagNameWithNoSpaces := strings.Replace(tag.Name, " ", `\_`, -1)
			tagsRowItems = append(tagsRowItems, fmt.Sprintf("#%s", tagNameWithNoSpaces))
		}

		content = fmt.Sprintf("%s\n\n%s", strings.Join(tagsRowItems, " "), content)
	}

	post := feed.Post{
		Title:   fmt.Sprintf("%s –æ—Ç %s", product.Name, product.Brand),
		Content: content,
		Images:  postImages,
		Link:    product.Link,
	}

	// –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç

	err = pp.poster.PublishPost(post)
	if err != nil {
		return fmt.Errorf("can't publish post: %w", err)
	}

	return nil
}
